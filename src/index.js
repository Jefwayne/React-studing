import React from "react";
import * as ReactDOMClient from "react-dom/client";
import App from "./App";

// ReactDOM.render(React.createElement("input", {
//     placeholder: "Help text",
//     name: "Password",
//     onClick: () => console.log("Clicked")
// }), document.getElementById("app"))

const app = ReactDOMClient.createRoot(document.getElementById("app"));

app.render(<App />);

console.log("hay");

/*ReactDOM позволяеть обратиться к всей html странице и выбрать нужный объект. Внутрь родительского тега нельзя указывать многа паратметров. 
Технология JSX позволяеть писать html код в js как в html файле. Без этой технологии нужно писать React.createElement("input")
В react нужна по синтаксиси писать onClick. Также параметры можна записывать в переменые. Для написания функционала в react использують {}.
Для того чтобы поменять клас для тега нужно писать className а не class для того чтобы не было конфликтов с React js
<App/> Это компонент
Компонент (или React компонент) - это основная единица создания 
пользовательского интерфейса в React. Он представляет собой независимый модуль, 
который можно повторно использовать на разных страницах и в разных частях приложения.
class Header extends React.Component Это создания класа extends говорит что мы будем наследовать всё от родителя.
В класах для написания функции не нужно писать слово function. Если мы обращаемся к значению внутри класа то нужно писать this.
props используеться для того чтобы передать свойство из одного класа в другой. Также нельзя менять значения для свойства title.
Когда мы из одного файла в другой что-то передаём мы должны импортировать  import App from "./App" и в другом файле експортировать
export default App. В React принято помещять каждый компонент в отдельный файл. import "./css/style.css" Таким образом можно подключить 
css в js файле. Для подключения картинки нужно писать import logo from "./img/communityIcon_4g1uo0kd87c61.png" 
this.state используеться для динамического изменения состояния. bind вызивает событие и в качестве события он может
принимать this
Хуки позволяют добавлять функциональность в компоненты, такую как состояние, эффекты и контекст, без необходимости 
создавать классы. Они также обеспечивают совместимость со старым кодом, который был написан на классах.
Также часто использують место класов функции
const Button = => () {
  return {

  }
}* Фунции удобно использовать если надо создать маленький компонент
Button.defaultProps можно задать значения по умолчанию

В React props (сокращение от "properties") представляют собой объекты, передаваемые от одного 
компонента к другому в качестве параметров. Они используются 
для передачи данных между компонентами и управления динамическим содержимым приложения. 
Props могут содержать любые данные, включая строки, числа, массивы, объекты и функции
Все хуки начинаються на use ими можна менять состояния. Для изменения состояния использують [click, setClick]
useEffect - это хук (hook) в React, который позволяет выполнять побочные эффекты (side effects) в функциональных компонентах React.
Побочные эффекты могут быть различными операциями, такими как изменение заголовка страницы, получение данных из внешнего источника, 
обращение к API, изменение состояния компонента и т.д. Использование хука useEffect позволяет запускать эти операции только тогда, 
когда необходимо, и при необходимости можно управлять их выполнением. Для того чтобы использовать useEffect в класах нужно писать 
    componentDidUpdate(prevPro) {
        
    } и это метод работает при помощи условий тоесть если какоето условие сработало то будет выполнено то что было написано в условии.
    
    */
